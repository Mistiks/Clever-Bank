package controller.service;

import controller.service.api.IAccountService;
import model.entity.Account;
import utils.api.IYmlFileReader;

import java.sql.*;
import java.time.LocalDate;
import java.time.LocalTime;

/** A class for CRUD operations with table "account" in database */
public class AccountService implements IAccountService {

    /** A database connection */
    private final Connection connection;

    /** Interface for reading values from a YML file*/
    private IYmlFileReader fileReader;

    /** Key with percent value in YML file*/
    private String percentKey = "percentagePerMonth";

    /** A query for inserting account */
    private final String insertStatement = "INSERT INTO clever_bank.account VALUES (?, ?, ?, ?, ?)";

    /** A query for inserting account with autogenerated id */
    private final String insertStatementWithoutId = "INSERT INTO clever_bank.account " +
            "(bank_id, balance, user_id, creation_date) VALUES (?, ?, ?, ?)";

    /** A query for retrieving account from database based on id */
    private final String readStatement = "SELECT * FROM clever_bank.account WHERE id = ?";

    /** A query for updating account in database based on id */
    private final String updateStatement = "UPDATE clever_bank.account SET bank_id = ?, balance = ?, " +
            "user_id = ?, creation_date = ? WHERE id = ?";

    /** A query for updating balance in all bank accounts in database based on bank name and percent from config file */
    private final String updateAllBankAccountsBalanceStatement = "UPDATE clever_bank.account SET balance = balance * ? " +
            "WHERE bank_id = (SELECT id FROM clever_bank.bank WHERE name = ?)";

    /** A query for deleting account from database based on id */
    private final String deleteStatement = "DELETE FROM clever_bank.account WHERE account.id = ?";

    /**
     * A constructor with parameter
     *
     * @param connection connection with database
     */
    public AccountService(Connection connection, IYmlFileReader ymlFileReader) {
        this.connection = connection;
        fileReader = ymlFileReader;
    }

    /**
     * Adds a new account to the database. Prints message in case of errors
     *
     * @param id account id. Id less than or equal to zero will be used in query. Recommended for test purposes.
     *           Id bigger than zero will not be used in query and database will use self-generated value
     * @param bankId id of bank. Cannot be null
     * @param balance account balance
     * @param userId id of account owner
     * @param date account creation date
     *
     * @return number of affected by query rows
     */
    @Override
    public int addAccount(long id, long bankId, double balance, long userId, Date date) {
        PreparedStatement statement;
        int numberOfAffectedRows = 0;

        try {
            if (id <= 0) {
                statement = connection.prepareStatement(insertStatement);
                statement.setLong(1, id);
                statement.setLong(2, bankId);
                statement.setDouble(3, balance);
                statement.setLong(4, userId);
                statement.setDate(5, date);
            } else {
                statement = connection.prepareStatement(insertStatementWithoutId);
                statement.setLong(1, bankId);
                statement.setDouble(2, balance);
                statement.setLong(3, userId);
                statement.setDate(4, date);
            }

            synchronized (connection) {
                numberOfAffectedRows = statement.executeUpdate();
            }
        } catch (SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        }

        return numberOfAffectedRows;
    }

    /**
     * Reads account with specified id from database. Prints message in case of errors
     *
     * @param id account id
     *
     * @return instance of Account class with specified id
     * or default values if account does not exist or SQLException occurred
     */
    @Override
    public Account getAccount(long id) {
        Account account = new Account();
        PreparedStatement statement;
        ResultSet resultSet;

        try {
            statement = connection.prepareStatement(readStatement);
            statement.setLong(1, id);

            synchronized (connection) {
                resultSet = statement.executeQuery();
            }

            while (resultSet.next()) {
                account = new Account(resultSet.getLong("id"), resultSet.getLong("bank_id"),
                        resultSet.getDouble("balance"), resultSet.getLong("user_id"),
                        resultSet.getDate("creation_date"));
            }
        } catch (SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        }

        return account;
    }

    /**
     * Updates account`s info in the database. Prints message in case of errors
     *
     * @param updatedAccount Account object with updated values
     *
     * @return number of affected by query rows
     */
    @Override
    public int updateAccount(Account updatedAccount) {
        int numberOfAffectedRows = 0;
        PreparedStatement statement;

        try {
            statement = connection.prepareStatement(updateStatement);
            statement.setLong(1, updatedAccount.getBankId());
            statement.setDouble(2, updatedAccount.getBalance());
            statement.setLong(3, updatedAccount.getUserId());
            statement.setDate(4, updatedAccount.getCreationDate());
            statement.setLong(5, updatedAccount.getId());

            synchronized (connection) {
                numberOfAffectedRows = statement.executeUpdate();
            }
            } catch (SQLException e) {
                System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
            }

        return numberOfAffectedRows;
    }

    /**
     * Updates balance of all accounts of selected bank. Receives percent value from YML file.
     * Prints message in case of errors
     *
     * @param bankName name of bank which accounts will be updated
     *
     * @return number of affected by query rows
     */
    @Override
    public int updateAllBankAccountsBalance(String bankName) {
        int numberOfAffectedRows = 0;
        double percent = 1.0 + Double.parseDouble(fileReader.getStringValueFromFile(percentKey)) / 100.0;
        PreparedStatement statement;

        try {
            statement = connection.prepareStatement(updateAllBankAccountsBalanceStatement);
            statement.setDouble(1, percent);
            statement.setString(2, bankName);

            synchronized (connection) {
                numberOfAffectedRows = statement.executeUpdate();
            }
        } catch (SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        }

        return numberOfAffectedRows;
    }

    /**
     * Deletes account from the database. Prints message in case of errors
     *
     * @param id account id.
     *
     * @return number of affected by query rows
     */
    @Override
    public int deleteAccount(long id) {
        int numberOfAffectedRows = 0;
        PreparedStatement statement;

        try {
            statement = connection.prepareStatement(deleteStatement);
            statement.setLong(1, id);

            synchronized (connection) {
                numberOfAffectedRows = statement.executeUpdate();
            }
        } catch (SQLException e) {
            System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
        }

        return numberOfAffectedRows;
    }

    /**
     * Checks every 30 seconds if now 2 in the morning on the last day of month.
     * If yes, adds money to all Clever-Bank accounts. Added percentage is taken from YML file
     */
    @Override
    public void run() {
        LocalDate currentDate;
        LocalTime currentTime;

        try {
            while (!Thread.currentThread().isInterrupted()) {
                currentDate = LocalDate.now();
                currentTime = LocalTime.now();

                if (currentDate.getDayOfMonth() == currentDate.lengthOfMonth()
                        && currentTime.getHour() == 2 && currentTime.getMinute() == 0 && currentTime.getSecond() < 30) {
                    updateAllBankAccountsBalance("Clever-Bank");
                }

                Thread.sleep(30000);
            }
        } catch (InterruptedException exception) {
            Thread.currentThread().interrupt();
        }
    }
}